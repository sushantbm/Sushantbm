
╔══════════════════════════════════════════════════════════════════════╗
║                                                                      ║
║          🚀 RESUME JOB FIT ANALYZER - SETUP GUIDE                   ║
║          Complete Step-by-Step Installation Instructions             ║
║                                                                      ║
╚══════════════════════════════════════════════════════════════════════╝

📦 WHAT'S INCLUDED:
==================
✓ Django REST API Backend with LangChain integration
✓ React Frontend with Bootstrap UI
✓ PostgreSQL Database models
✓ Complete AI-powered resume analysis
✓ Docker configuration for easy deployment
✓ Comprehensive documentation


🔧 PREREQUISITES:
=================
Before starting, ensure you have:

1. Python 3.8 or higher
   Download: https://www.python.org/downloads/

2. Node.js 16 or higher
   Download: https://nodejs.org/

3. PostgreSQL 12 or higher
   Download: https://www.postgresql.org/download/

4. Visual Studio Code
   Download: https://code.visualstudio.com/

5. OpenAI API Key
   Get yours: https://platform.openai.com/api-keys


📂 STEP 1: EXTRACT THE PROJECT
===============================
1. Extract the resume-job-analyzer.zip file
2. Open Visual Studio Code
3. File → Open Folder → Select "resume-job-analyzer" folder


🐍 STEP 2: SETUP PYTHON BACKEND
================================
Open VS Code terminal (Ctrl+` or Terminal → New Terminal)

A. Create Virtual Environment:
   Windows:
   python -m venv venv
   venv\Scripts\activate

   macOS/Linux:
   python3 -m venv venv
   source venv/bin/activate

B. Install Python Dependencies:
   pip install --upgrade pip
   pip install -r requirements.txt

C. Download Required Data:
   python -c "import nltk; nltk.download('punkt'); nltk.download('stopwords')"
   python -m spacy download en_core_web_sm


🗄️ STEP 3: SETUP POSTGRESQL DATABASE
======================================
A. Install PostgreSQL (if not already installed):
   Windows: Use installer from postgresql.org
   macOS: brew install postgresql
   Linux: sudo apt install postgresql postgresql-contrib

B. Start PostgreSQL Service:
   Windows: Services → PostgreSQL → Start
   macOS: brew services start postgresql
   Linux: sudo service postgresql start

C. Create Database:
   Open terminal and run:

   sudo -u postgres psql

   Then in PostgreSQL prompt:

   CREATE DATABASE resume_analyzer_db;
   CREATE USER postgres WITH PASSWORD 'your_password';
   ALTER ROLE postgres SET client_encoding TO 'utf8';
   ALTER ROLE postgres SET default_transaction_isolation TO 'read committed';
   ALTER ROLE postgres SET timezone TO 'UTC';
   GRANT ALL PRIVILEGES ON DATABASE resume_analyzer_db TO postgres;
   \q


🔐 STEP 4: CONFIGURE ENVIRONMENT VARIABLES
===========================================
A. Copy the example environment file:
   cp .env.example .env

B. Edit .env file and update:

   SECRET_KEY=your-django-secret-key-here
   DEBUG=True

   DB_NAME=resume_analyzer_db
   DB_USER=postgres
   DB_PASSWORD=your_password_here
   DB_HOST=localhost
   DB_PORT=5432

   OPENAI_API_KEY=sk-your-openai-api-key-here

C. Generate Django Secret Key (optional):
   python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"


💾 STEP 5: RUN DATABASE MIGRATIONS
===================================
With virtual environment activated:

python manage.py makemigrations
python manage.py migrate

Optional - Create admin user:
python manage.py createsuperuser


⚛️ STEP 6: SETUP REACT FRONTEND
=================================
Open a NEW terminal in VS Code:

A. Navigate to frontend:
   cd frontend

B. Install Node dependencies:
   npm install

C. Create frontend .env (already done):
   File should contain:
   REACT_APP_API_URL=http://localhost:8000/api


🚀 STEP 7: RUN THE APPLICATION
===============================
You need TWO terminals running simultaneously:

TERMINAL 1 - Django Backend:
---------------------------
# Activate virtual environment first
venv\Scripts\activate  (Windows)
source venv/bin/activate (macOS/Linux)

# Run Django server
python manage.py runserver

# Server will start at: http://localhost:8000


TERMINAL 2 - React Frontend:
----------------------------
cd frontend
npm start

# React will start at: http://localhost:3000
# Browser will open automatically


✅ STEP 8: VERIFY INSTALLATION
===============================
1. Open browser to: http://localhost:3000
2. You should see the "AI Resume Analyzer" interface
3. Test the health check: http://localhost:8000/api/health/
4. Try uploading a sample resume or pasting text


🐳 ALTERNATIVE: USING DOCKER
=============================
If you prefer Docker:

1. Install Docker Desktop:
   https://www.docker.com/products/docker-desktop

2. Run from project root:
   docker-compose up --build

3. Access at: http://localhost:3000


📋 TESTING THE APPLICATION
===========================
A. Using Web Interface:
   1. Open http://localhost:3000
   2. Upload a resume file or paste text
   3. Enter job title (e.g., "Software Engineer")
   4. Click "Analyze Fit"
   5. View results with similarity score and explanation

B. Using API with cURL:
   curl -X POST http://localhost:8000/api/predict_fit/ \
     -F "resume_text=Software Engineer with Python..." \
     -F "job_title=Senior Developer"

C. Check Django Admin:
   1. Navigate to http://localhost:8000/admin
   2. Login with superuser credentials
   3. View JobAnalysis records


🔍 TROUBLESHOOTING
==================

Problem: "Module not found" error
Solution: Ensure virtual environment is activated and requirements installed

Problem: Database connection error
Solution: 
  - Check PostgreSQL is running
  - Verify credentials in .env file
  - Test connection: psql -U postgres -d resume_analyzer_db

Problem: OpenAI API error
Solution:
  - Check API key in .env
  - Verify key at: https://platform.openai.com/api-keys
  - Ensure you have API credits

Problem: CORS error in React
Solution:
  - Check django-cors-headers is installed
  - Verify CORS_ALLOWED_ORIGINS in settings.py
  - Ensure both servers are running

Problem: Port already in use
Solution:
  - Django: python manage.py runserver 8001
  - React: Change PORT in frontend/.env

Problem: Static files not loading
Solution:
  python manage.py collectstatic


📚 USEFUL COMMANDS
==================

Django:
-------
python manage.py runserver              # Start dev server
python manage.py makemigrations         # Create migrations
python manage.py migrate                # Apply migrations
python manage.py createsuperuser        # Create admin user
python manage.py test                   # Run tests
python manage.py shell                  # Django shell

React:
------
npm start                               # Start dev server
npm run build                           # Build for production
npm test                                # Run tests

Database:
---------
python manage.py dbshell                # PostgreSQL shell
python manage.py flush                  # Clear database


🎯 NEXT STEPS
=============
1. Test the application with different resumes
2. Customize the analysis prompts in api/utils.py
3. Add more skills to ResumeInfoExtractor
4. Extend the database models as needed
5. Customize the React UI styling
6. Deploy to production (see README.md)


📞 GETTING HELP
===============
- Check README.md for detailed documentation
- Review Django logs: logs/django.log
- Check browser console for frontend errors
- Verify API responses in Network tab


🎉 SUCCESS!
===========
Your Resume Job Fit Analyzer is now ready to use!

Visit: http://localhost:3000

Enjoy analyzing resumes with AI! 🚀


═══════════════════════════════════════════════════════════════════════
Created with ❤️ using Django, React, LangChain, and OpenAI
═══════════════════════════════════════════════════════════════════════
